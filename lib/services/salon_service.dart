import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/salon_model.dart';
import '../models/service_model.dart';
import 'dart:math';

class SalonService {
  // Firebase Firestore instance
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Mock salon verileri (geli≈ütirme i√ßin)
  List<SalonModel> _salons = [];

  SalonService() {
    _initMockData();
  }

  void _initMockData() {
    _salons = [
      SalonModel(
        id: "1",
        name: "G√ºzellik Merkezi Ay≈üe",
        description: "Profesyonel kuaf√∂r hizmetleri ve g√ºzellik bakƒ±mƒ±. 15 yƒ±llƒ±k deneyimimizle sizlere en kaliteli hizmeti sunuyoruz.",
        category: "Kuaf√∂r",
        address: "Kadƒ±k√∂y Moda Caddesi No:123, ƒ∞stanbul",
        latitude: 40.9990,
        longitude: 29.0309,
        phoneNumber: "+90212123456",
        rating: 4.8,
        reviewCount: 156,
        imageUrl: "https://example.com/salon1.jpg",
        images: [
          "https://example.com/salon1.jpg",
          "https://example.com/salon1_2.jpg",
        ],
        workingHours: {
          'Pazartesi': ['09:00', '18:00'],
          'Salƒ±': ['09:00', '18:00'],
          '√áar≈üamba': ['09:00', '18:00'],
          'Per≈üembe': ['09:00', '18:00'],
          'Cuma': ['09:00', '18:00'],
          'Cumartesi': ['10:00', '17:00'],
          'Pazar': ['Kapalƒ±', 'Kapalƒ±'],
        },
        services: [
          ServiceModel(
            id: "s1",
            salonId: "1",
            name: "Kadƒ±n Sa√ß Kesimi",
            description: "Profesyonel kadƒ±n sa√ß kesimi ve ≈üekillendirme",
            price: 150,
            durationMinutes: 60,
            category: ServiceCategory.haircut,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s2",
            salonId: "1",
            name: "Sa√ß Boyama",
            description: "Doƒüal sa√ß boyama ve renklendirme",
            price: 300,
            durationMinutes: 120,
            category: ServiceCategory.coloring,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s3",
            salonId: "1",
            name: "Keratin Bakƒ±m",
            description: "Sa√ß bakƒ±m ve onarƒ±m tedavisi",
            price: 250,
            durationMinutes: 90,
            category: ServiceCategory.treatment,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s4",
            salonId: "1",
            name: "F√∂n √áekimi",
            description: "Profesyonel f√∂n ve ≈üekillendirme",
            price: 80,
            durationMinutes: 45,
            category: ServiceCategory.haircut,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
        ],
        ownerId: "2",
        createdAt: DateTime.now().subtract(Duration(days: 30)),
      ),
      SalonModel(
        id: "2",
        name: "Modern Berber Salih",
        description: "Erkek kuaf√∂r√º ve tƒ±ra≈ü hizmetleri. Geleneksel ustura tƒ±ra≈üƒ± ve modern sa√ß kesimleri.",
        category: "Berber",
        address: "Be≈üikta≈ü Barbaros Bulvarƒ± No:45, ƒ∞stanbul",
        latitude: 41.0422,
        longitude: 29.0098,
        phoneNumber: "+90212987654",
        rating: 4.5,
        reviewCount: 89,
        imageUrl: "https://example.com/salon2.jpg",
        images: [
          "https://example.com/salon2.jpg",
        ],
        workingHours: {
          'Pazartesi': ['08:00', '20:00'],
          'Salƒ±': ['08:00', '20:00'],
          '√áar≈üamba': ['08:00', '20:00'],
          'Per≈üembe': ['08:00', '20:00'],
          'Cuma': ['08:00', '20:00'],
          'Cumartesi': ['09:00', '18:00'],
          'Pazar': ['Kapalƒ±', 'Kapalƒ±'],
        },
        services: [
          ServiceModel(
            id: "s5",
            salonId: "2",
            name: "Erkek Sa√ß Kesimi",
            description: "Klasik ve modern erkek sa√ß kesimleri",
            price: 80,
            durationMinutes: 30,
            category: ServiceCategory.haircut,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s6",
            salonId: "2",
            name: "Sakal Tƒ±ra≈ü",
            description: "Geleneksel ustura tƒ±ra≈üƒ±",
            price: 50,
            durationMinutes: 20,
            category: ServiceCategory.shaving,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s7",
            salonId: "2",
            name: "Sa√ß + Sakal Kombo",
            description: "Sa√ß kesimi ve sakal tƒ±ra≈ü paketi",
            price: 120,
            durationMinutes: 45,
            category: ServiceCategory.haircut,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
        ],
        ownerId: "3",
        createdAt: DateTime.now().subtract(Duration(days: 45)),
      ),
      SalonModel(
        id: "3",
        name: "L√ºks G√ºzellik Salonu Elif",
        description: "Premium g√ºzellik ve bakƒ±m hizmetleri. VIP m√º≈üteri deneyimi ve l√ºks ortam.",
        category: "G√ºzellik Salonu",
        address: "Ni≈üanta≈üƒ± Abdi ƒ∞pek√ßi Caddesi No:67, ƒ∞stanbul",
        latitude: 41.0460,
        longitude: 28.9943,
        phoneNumber: "+90212555777",
        rating: 4.9,
        reviewCount: 234,
        imageUrl: "https://example.com/salon3.jpg",
        images: [
          "https://example.com/salon3.jpg",
          "https://example.com/salon3_2.jpg",
          "https://example.com/salon3_3.jpg",
        ],
        workingHours: {
          'Pazartesi': ['10:00', '19:00'],
          'Salƒ±': ['10:00', '19:00'],
          '√áar≈üamba': ['10:00', '19:00'],
          'Per≈üembe': ['10:00', '19:00'],
          'Cuma': ['10:00', '19:00'],
          'Cumartesi': ['10:00', '18:00'],
          'Pazar': ['11:00', '17:00'],
        },
        services: [
          ServiceModel(
            id: "s8",
            salonId: "3",
            name: "Sa√ß Bakƒ±mƒ± & Keratin",
            description: "Keratin bakƒ±m ve onarƒ±m tedavisi",
            price: 350,
            durationMinutes: 120,
            category: ServiceCategory.treatment,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s9",
            salonId: "3",
            name: "√ñzel G√ºn Makyajƒ±",
            description: "D√ºƒü√ºn, ni≈üan ve √∂zel g√ºnler i√ßin profesyonel makyaj",
            price: 300,
            durationMinutes: 60,
            category: ServiceCategory.makeup,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s10",
            salonId: "3",
            name: "L√ºks Sa√ß Kesimi",
            description: "VIP sa√ß kesimi ve ≈üekillendirme",
            price: 200,
            durationMinutes: 75,
            category: ServiceCategory.haircut,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s11",
            salonId: "3",
            name: "Cilt Bakƒ±mƒ±",
            description: "Profesyonel cilt bakƒ±m ve temizleme",
            price: 250,
            durationMinutes: 90,
            category: ServiceCategory.skincare,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
          ServiceModel(
            id: "s12",
            salonId: "3",
            name: "Manik√ºr & Pedik√ºr",
            description: "Nail art ve tƒ±rnak bakƒ±mƒ±",
            price: 150,
            durationMinutes: 60,
            category: ServiceCategory.nail,
            isActive: true,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
        ],
        ownerId: "4",
        createdAt: DateTime.now().subtract(Duration(days: 60)),
      ),
    ];
  }

  // Pop√ºler salonlarƒ± getir - Firebase'den
  Future<List<SalonModel>> getPopularSalons({int limit = 5}) async {
    try {
      // Mock verileri Firebase'e kaydet
      await saveMockSalonsToFirebase();
      
      // Firebase'den pop√ºler salonlarƒ± getir
      final querySnapshot = await _firestore
          .collection('salons')
          .orderBy('rating', descending: true)
          .limit(limit)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        final firebaseSalons = querySnapshot.docs
            .map((doc) => SalonModel.fromFirestore(doc))
            .toList();
        print('üî• Firebase\'den ${firebaseSalons.length} pop√ºler salon y√ºklendi');
        return firebaseSalons;
      }
      
      // Firebase bo≈üsa mock verileri kullan
      print('üìç Firebase bo≈ü, mock veriler kullanƒ±lƒ±yor');
      await Future.delayed(Duration(milliseconds: 300));
      List<SalonModel> sortedSalons = List.from(_salons);
      sortedSalons.sort((a, b) => b.rating.compareTo(a.rating));
      return sortedSalons.take(limit).toList();
    } catch (e) {
      print('‚ùå Firebase pop√ºler salon hatasƒ±: $e');
      // Hata durumunda mock verileri kullan
      await Future.delayed(Duration(milliseconds: 300));
      List<SalonModel> sortedSalons = List.from(_salons);
      sortedSalons.sort((a, b) => b.rating.compareTo(a.rating));
      return sortedSalons.take(limit).toList();
    }
  }

  // Salon ekleme (esnaf i√ßin)
  Future<void> addSalon(SalonModel salon) async {
    try {
      await _firestore.collection('salons').doc(salon.id).set(salon.toFirestore());
    } catch (e) {
      throw Exception('Salon eklenemedi: $e');
    }
  }

  // Salon olu≈ütur (yeni method)
  Future<void> createSalon(SalonModel salon) async {
    try {
      await _firestore.collection('salons').doc(salon.id).set(salon.toFirestore());
      print('Salon Firestore\'a kaydedildi: ${salon.name}');
    } catch (e) {
      print('Salon kaydetme hatasƒ±: $e');
      throw Exception('Salon kaydedilemedi: $e');
    }
  }

  // Kullanƒ±cƒ±nƒ±n salonunu getir
  Future<SalonModel?> getUserSalon(String userId) async {
    try {
      final doc = await _firestore.collection('salons').doc(userId).get();
      if (doc.exists) {
        return SalonModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      print('Salon getirme hatasƒ±: $e');
      return null;
    }
  }

  // Salon g√ºncelle
  Future<void> updateSalon(SalonModel salon) async {
    try {
      await _firestore.collection('salons').doc(salon.id).update(salon.toFirestore());
      print('Salon g√ºncellendi: ${salon.name}');
    } catch (e) {
      print('Salon g√ºncelleme hatasƒ±: $e');
      throw Exception('Salon g√ºncellenemedi: $e');
    }
  }

  // Mock verileri Firebase'e kaydet (bir kerelik)
  Future<void> saveMockSalonsToFirebase() async {
    try {
      for (var salon in _salons) {
        final doc = await _firestore.collection('salons').doc(salon.id).get();
        if (!doc.exists) {
          await _firestore.collection('salons').doc(salon.id).set(salon.toFirestore());
          print('‚úÖ Mock salon Firebase\'e kaydedildi: ${salon.name}');
        }
      }
      print('üî• T√ºm mock salonlar Firebase\'e kaydedildi');
    } catch (e) {
      print('‚ùå Mock salon kaydetme hatasƒ±: $e');
    }
  }

  // T√ºm salonlarƒ± getir
  Future<List<SalonModel>> getAllSalons() async {
    try {
      // ƒ∞lk √ßalƒ±≈ütƒ±rmada mock verileri Firebase'e kaydet
      await saveMockSalonsToFirebase();
      
      // Firebase'den salon verilerini getir
      final querySnapshot = await _firestore.collection('salons').get();
      
      if (querySnapshot.docs.isNotEmpty) {
        final firebaseSalons = querySnapshot.docs
            .map((doc) => SalonModel.fromFirestore(doc))
            .toList();
        print('üî• Firebase\'den ${firebaseSalons.length} salon y√ºklendi');
        return firebaseSalons;
      }

      // Firebase bo≈üsa mock verileri d√∂nd√ºr
      print('üìç Firebase bo≈ü, mock veriler kullanƒ±lƒ±yor');
      await Future.delayed(Duration(milliseconds: 200));
      return _salons;
    } catch (e) {
      print('‚ùå Firebase salon hatasƒ±: $e');
      // Hata durumunda mock verileri kullan
      await Future.delayed(Duration(milliseconds: 200));
      return _salons;
    }
  }

  // ID ile salon getir
  Future<SalonModel?> getSalonById(String salonId) async {
    try {
      // Mock verileri Firebase'e kaydet
      await saveMockSalonsToFirebase();
      
      // Firebase'den salon getir
      final doc = await _firestore.collection('salons').doc(salonId).get();
      
      if (doc.exists) {
        final salon = SalonModel.fromFirestore(doc);
        
        // Salonun hizmetlerini Firebase'den √ßek
        final services = await getSalonServices(salonId);
        
        // Salon'u hizmetleriyle birlikte d√∂nd√ºr
        final salonWithServices = salon.copyWith(services: services);
        print('üî• Firebase\'den salon bulundu: ${salon.name} (${services.length} hizmet)');
        return salonWithServices;
      }

      // Firebase'de bulunamadƒ±ysa mock verilerden ara
      try {
        final mockSalon = _salons.firstWhere((salon) => salon.id == salonId);
        print('üìç Mock verilerden salon bulundu: ${mockSalon.name}');
        return mockSalon;
      } catch (e) {
        print('‚ùå Salon bulunamadƒ±: $salonId');
        return null;
      }
    } catch (e) {
      print('‚ùå Firebase salon getirme hatasƒ±: $e');
      // Hata durumunda mock verilerden dene
      try {
        final mockSalon = _salons.firstWhere((salon) => salon.id == salonId);
        return mockSalon;
      } catch (e) {
        return null;
      }
    }
  }

  // Konum bazƒ±nda salonlarƒ± getir
  Future<List<SalonModel>> getNearestSalons({
    required double latitude,
    required double longitude,
    double radiusKm = 5.0,
    int limit = 10,
  }) async {
    try {
      // Firebase Geolocation query (daha kompleks olacak, ≈üimdilik basit versiyonu)
      final querySnapshot = await _firestore
          .collection('salons')
          .limit(limit)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        List<SalonModel> salons = querySnapshot.docs
            .map((doc) => SalonModel.fromFirestore(doc))
            .toList();
        
        // Mesafeye g√∂re filtrele ve sƒ±rala
        salons = salons.where((salon) {
          double distance = salon.calculateDistance(latitude, longitude);
          return distance <= radiusKm;
        }).toList();

        salons.sort((a, b) {
          double distanceA = a.calculateDistance(latitude, longitude);
          double distanceB = b.calculateDistance(latitude, longitude);
          return distanceA.compareTo(distanceB);
        });

        return salons;
      }

      // Mock verilerle √ßalƒ±≈ü
      List<SalonModel> nearestSalons = _salons.where((salon) {
        double distance = salon.calculateDistance(latitude, longitude);
        return distance <= radiusKm;
      }).toList();

      nearestSalons.sort((a, b) {
        double distanceA = a.calculateDistance(latitude, longitude);
        double distanceB = b.calculateDistance(latitude, longitude);
        return distanceA.compareTo(distanceB);
      });

      return nearestSalons.take(limit).toList();
    } catch (e) {
      print('En yakƒ±n salonlar bulunamadƒ±: $e');
      return [];
    }
  }

  // Hizmet y√∂netimi methodlarƒ±
  
  // Salon hizmetlerini getir
  Future<List<ServiceModel>> getSalonServices(String salonId) async {
    try {
      print('üîç getSalonServices ba≈ülatƒ±ldƒ±: salonId=$salonId');
      
      // Basit query (index gerekmez)
      final querySnapshot = await _firestore
          .collection('services')
          .where('salonId', isEqualTo: salonId)
          .where('isActive', isEqualTo: true)
          .get();

      print('üìä Firebase query sonucu: ${querySnapshot.docs.length} dokuman');

      final services = querySnapshot.docs
          .map((doc) {
            print('üìÑ Service doc: ${doc.id} -> ${doc.data()}');
            return ServiceModel.fromFirestore(doc);
          })
          .toList();

      // Client-side sorting (orderBy yerine)
      services.sort((a, b) => a.createdAt.compareTo(b.createdAt));
          
      print('üî• Firebase\'den ${services.length} hizmet y√ºklendi (salon: $salonId)');
      print('üìã Hizmet listesi: ${services.map((s) => '${s.name}(${s.id})').join(', ')}');
      return services;
    } catch (e) {
      print('‚ùå Firebase hizmet getirme hatasƒ±: $e');
      print('‚ùå Stack trace: ${StackTrace.current}');
      return [];
    }
  }

  // Hizmet ekle
  Future<void> addService(ServiceModel service) async {
    try {
      print('üöÄ addService ba≈ülatƒ±ldƒ±: ${service.name}');
      print('üìÑ Service data: ID=${service.id}, SalonID=${service.salonId}, Name=${service.name}');
      
      final docRef = _firestore.collection('services').doc();
      print('üìÑ Firebase doc reference olu≈üturuldu: ${docRef.id}');
      
      final serviceWithId = service.copyWith(id: docRef.id);
      print('üìÑ Service with new ID: ${serviceWithId.id}');
      
      final firestoreData = serviceWithId.toFirestore();
      print('üìÑ Firestore data: $firestoreData');
      
      await docRef.set(firestoreData);
      print('‚úÖ Hizmet Firebase\'e eklendi: ${service.name} (ID: ${docRef.id})');
    } catch (e) {
      print('‚ùå Hizmet ekleme hatasƒ±: $e');
      print('‚ùå Stack trace: ${StackTrace.current}');
      throw Exception('Hizmet eklenemedi: $e');
    }
  }

  // Hizmet g√ºncelle
  Future<void> updateService(ServiceModel service) async {
    try {
      await _firestore
          .collection('services')
          .doc(service.id)
          .update(service.toFirestore());
      print('‚úÖ Hizmet g√ºncellendi: ${service.name}');
    } catch (e) {
      print('‚ùå Hizmet g√ºncelleme hatasƒ±: $e');
      throw Exception('Hizmet g√ºncellenemedi: $e');
    }
  }

  // Hizmet sil
  Future<void> deleteService(String serviceId) async {
    try {
      await _firestore
          .collection('services')
          .doc(serviceId)
          .update({'isActive': false, 'updatedAt': Timestamp.fromDate(DateTime.now())});
      print('‚úÖ Hizmet silindi: $serviceId');
    } catch (e) {
      print('‚ùå Hizmet silme hatasƒ±: $e');
      throw Exception('Hizmet silinemedi: $e');
    }
  }

  // Salon olu≈ütururken varsayƒ±lan hizmetler ekle
  Future<void> addDefaultServices(String salonId) async {
    try {
      final defaultServices = [
        ServiceModel(
          id: '',
          salonId: salonId,
          name: 'Sa√ß Kesimi',
          description: 'Profesyonel sa√ß kesimi ve ≈üekillendirme',
          price: 100.0,
          durationMinutes: 45,
          category: ServiceCategory.haircut,
          isActive: true,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
        ServiceModel(
          id: '',
          salonId: salonId,
          name: 'F√∂n √áekimi',
          description: 'Profesyonel f√∂n ve ≈üekillendirme',
          price: 60.0,
          durationMinutes: 30,
          category: ServiceCategory.treatment,
          isActive: true,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
      ];

      for (var service in defaultServices) {
        await addService(service);
      }
      
      print('‚úÖ Varsayƒ±lan hizmetler eklendi (salon: $salonId)');
    } catch (e) {
      print('‚ùå Varsayƒ±lan hizmet ekleme hatasƒ±: $e');
    }
  }
} 